# For local customization, add a file to ~/.profile.local
# We will export that at the end of this file.

export PAGER="less"
export EDITOR='atom'

alias less='less -R'
alias home='ssh -t jch@rockyroadblog.com "screen -DR"'
alias hproxy='ssh -D 9999 208.53.44.43'
alias clr="find . -name '*.rej' -or -name '*.orig' -or -name '*~' -or -name '*.lock' -and -not -name 'Gemfile.lock' | xargs rm -f"
alias emacs='emacs -nw'

# Rails
alias r="touch tmp/restart.txt"
alias b="bundle exec"
alias t='rake test'
alias s='rake spec'

# Heroku
function h { heroku ${@:1:($#-1)} --app ${@: -1} ; }
function hp { h $@ enterprise-web ; }
function hs { h $@ enterprise-web-staging ; }

alias hpc="hp run console"
alias hsc="hs run console"

alias hpl="hp logs -t"
alias hsl="hs logs -t"

# Git
alias d='git diff --cached'
alias gd='git diff'
alias gm='git merge'
alias gb='git branch'
alias dbm='bundle exec rake db:migrate'
alias dbs='bundle exec rake db:setup'
function gr {
  grb track $1 > /dev/null
  git checkout $1
}

# Brent's show branch on prompt
function parse_git_dirty {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo ""
}

function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/[\1$(parse_git_dirty)]/"
}

# Shell
alias ls='ls --color'
export PS1='\u@\h:\[\033[0;31m\]\w\[\033[0;33m\]$(parse_git_branch)\[\e[0m\]$ '

# Mac
if [[ FreeBSD == $(uname) ]] || [[ Darwin == $(uname) ]] ; then
  alias ls='ls -G'
  alias updatedb='sudo /usr/libexec/locate.updatedb'
  # homebrew
  PATH="/bin:/usr/local/bin:/usr/local/sbin:/usr/local/share/python:$PATH"
fi

# Project overrides: look for .aliases file in working directory
if [ -e ".aliases" ] ; then
  source .aliases
fi

# Local overrides
if [ -e "~/.profile_local" ] ; then
  source ~/.profile_local
fi

# Current directory overrides
if [ -e ".profile_local" ] ; then
  source .profile_local
fi

source ~/.profile.d/git-completion

# hub tab-completion script for bash.
# This script complements the completion script that ships with git.

# Check that git tab completion is available
if declare -F _git > /dev/null; then
  # Duplicate and rename the 'list_all_commands' function
  eval "$(declare -f __git_list_all_commands | \
        sed 's/__git_list_all_commands/__git_list_all_commands_without_hub/')"

  # Wrap the 'list_all_commands' function with extra hub commands
  __git_list_all_commands() {
    cat <<-EOF
alias
pull-request
fork
create
browse
compare
EOF
    __git_list_all_commands_without_hub
  }

  # Ensure cached commands are cleared
  __git_all_commands=""
fi
